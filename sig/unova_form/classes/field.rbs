module UnovaForm
  module Classes
    class Field
      @all_validators: Hash[Symbol, Object]

      attr_reader type: singleton(FieldTypes::Base)
      attr_reader validators: Hash[Symbol, Object]?
      attr_reader has_confirmation: bool
      attr_reader use_type_validators: bool
      attr_reader required: bool
      attr_reader required_if_persisted: bool
      attr_reader options: (Array[Hash[Symbol, String | bool?] & { label: String, value: String, disabled: bool?, selected: bool? }] | ^(String value, Object parent) -> Array[Hash[Symbol, String | bool?] & { label: String, value: String, disabled: bool?, selected: bool? }])?
      attr_reader multiple: bool
      attr_reader additional_options: Hash[Symbol, Hash[Symbol, String]]

      def initialize: (
          singleton(FieldTypes::Base) | Symbol | String field_type,
          Hash[Symbol, Object]? validators, bool has_confirmation,
          bool use_type_validators,
          bool required,
          bool required_if_persisted,
          (Array[Hash[Symbol, String | bool?] & { label: String, value: String, disabled: bool?, selected: bool? }] | ^(Object value, Object parent) -> Array[Hash[Symbol, String | bool?] & { label: String, value: String, disabled: bool?, selected: bool? }])? options,
          bool multiple,
          **Hash[Symbol, Hash[Symbol, String]] additional_options
        ) -> void

      def all_validators: -> Hash[Symbol, Object]

      private

      def set_all_validators: -> void

    end
  end
end
