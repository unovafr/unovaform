module UnovaForm
  module Concerns
    module HasForm
      @current_form_context: Symbol?
      @forms: Hash[Symbol, UnovaForm::Classes::Form]?

      def delete_field: -> void

      def forms: -> Hash[Symbol, UnovaForm::Classes::Form]

      def def_forms: { () -> void } -> void

      def form: (Symbol validation_context, include_contexts: Array[Symbol]?, inherits_from: Symbol?, inherited_fields: Array[Symbol]?) { () -> void } -> void

      def field: (
        Symbol validation_context,
        singleton(UnovaForm::FieldTypes::Base) | Symbol | String field_type,
        validators: Hash[Symbol, Object]?,
        use_type_validators: bool,
        has_confirmation: bool,
        required: bool,
        required_if_persisted: bool,
        options: (Array[Hash[Symbol, String | bool?] & { label: String, value: String, disabled: bool?, selected: bool? }] | ^(String value, Object parent) -> Array[Hash[Symbol, String | bool?] & { label: String, value: String, disabled: bool?, selected: bool? }])?,
        multiple: bool,
        **Hash[Symbol, Object] additional_options
      ) -> void

      private
        def deep_freeze: (Object) -> Object

        def deep_frozen?: (Object) -> bool
    end
  end
end
